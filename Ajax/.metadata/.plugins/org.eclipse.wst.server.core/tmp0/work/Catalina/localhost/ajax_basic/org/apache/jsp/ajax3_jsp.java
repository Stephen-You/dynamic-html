/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/7.0.82
 * Generated at: 2018-09-22 14:37:29 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import java.util.*;

public final class ajax3_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private org.apache.jasper.runtime.TagHandlerPool _005fjspx_005ftagPool_005fc_005furl_0026_005fvalue_005fnobody;

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
    _005fjspx_005ftagPool_005fc_005furl_0026_005fvalue_005fnobody = org.apache.jasper.runtime.TagHandlerPool.getTagHandlerPool(getServletConfig());
  }

  public void _jspDestroy() {
    _005fjspx_005ftagPool_005fc_005furl_0026_005fvalue_005fnobody.release();
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
        throws java.io.IOException, javax.servlet.ServletException {

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html;charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\">\r\n");
      out.write("<html>\r\n");
      out.write("  <head>\r\n");
      out.write("    <title>异步验证用户名</title>\r\n");
      out.write("    \r\n");
      out.write("\t<meta http-equiv=\"pragma\" content=\"no-cache\">\r\n");
      out.write("\t<meta http-equiv=\"cache-control\" content=\"no-cache\">\r\n");
      out.write("\t<meta http-equiv=\"expires\" content=\"0\">    \r\n");
      out.write("\t<meta http-equiv=\"keywords\" content=\"keyword1,keyword2,keyword3\">\r\n");
      out.write("\t<meta http-equiv=\"description\" content=\"This is my page\">\r\n");
      out.write("\t<!--\r\n");
      out.write("\t<link rel=\"stylesheet\" type=\"text/css\" href=\"styles.css\">\r\n");
      out.write("\t-->\r\n");
      out.write("<script type=\"text/javascript\">\r\n");
      out.write("//创建异步对象\r\n");
      out.write("function createXMLHttpRequest() {\r\n");
      out.write("\ttry {\r\n");
      out.write("\t\treturn new XMLHttpRequest();//大多数浏览器\r\n");
      out.write("\t} catch (e) {\r\n");
      out.write("\t\ttry {\r\n");
      out.write("\t\t\treturn ActvieXObject(\"Msxml2.XMLHTTP\");//IE6.0\r\n");
      out.write("\t\t} catch (e) {\r\n");
      out.write("\t\t\ttry {\r\n");
      out.write("\t\t\t\treturn ActvieXObject(\"Microsoft.XMLHTTP\");//IE5.5及更早版本\t\r\n");
      out.write("\t\t\t} catch (e) {\r\n");
      out.write("\t\t\t\talert(\"哥们儿，您用的是什么浏览器啊？\");\r\n");
      out.write("\t\t\t\tthrow e;\r\n");
      out.write("\t\t\t}\r\n");
      out.write("\t\t}\r\n");
      out.write("\t}\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("window.onload = function() {\r\n");
      out.write("\t// 获取文本框，给它的失去焦点事件注册监听\r\n");
      out.write("\tvar userEle = document.getElementById(\"usernameEle\");\r\n");
      out.write("\t//onblur事件,当用户离开输入字段时对其进行验证\r\n");
      out.write("\tuserEle.onblur = function() {\r\n");
      out.write("\t\t//1.得到异步对象\r\n");
      out.write("\t\tvar xmlHttp = createXMLHttpRequest();\r\n");
      out.write("\t\t//2.打开连接\r\n");
      out.write("\t\txmlHttp.open(\"POST\", \"");
      if (_jspx_meth_c_005furl_005f0(_jspx_page_context))
        return;
      out.write("\", true);\r\n");
      out.write("\t\t//3.设置请求头：Content-Type\r\n");
      out.write("\t\txmlHttp.setRequestHeader(\"Content-Type\", \"application/x-www-form-urlencoded\");\r\n");
      out.write("\t\t//4.发送请求，给出请求体\r\n");
      out.write("\t\txmlHttp.send(\"username=\" + userEle.value);\r\n");
      out.write("\t\t\r\n");
      out.write("\t\t//5.给xmlHttp的onreadystatechange事件注册监听\r\n");
      out.write("\t\txmlHttp.onreadystatechange = function() {\r\n");
      out.write("\t\t\tif(xmlHttp.readyState == 4 && xmlHttp.status == 200) {//双重判断\r\n");
      out.write("\t\t\t\t//获取服务器的响应，判断是否为1\r\n");
      out.write("\t\t\t\t// 是：获取span，添加内容：“用户名已被注册”\r\n");
      out.write("\t\t\t\tvar text = xmlHttp.responseText;\r\n");
      out.write("\t\t\t\tvar headers = xmlHttp.getAllResponseHeaders();\r\n");
      out.write("\t\t\t\tvar header = xmlHttp.getResponseHeader(\"Content-Type\");\r\n");
      out.write("\t\t\t\tvar statusText = xmlHttp.statusText;\r\n");
      out.write("\t\t\t\talert(\"响应头的类型:\" + typeof headers + \"\\n\" + headers);\r\n");
      out.write("\t\t\t\talert(\"获取到的Content-Type类型为:\" + typeof header + \"\\n\" + header)\r\n");
      out.write("\t\t\t\talert(\"服务器返回的状态文本信息:\" + statusText);\r\n");
      out.write("\t\t\t\tvar span = document.getElementById(\"errorSpan\");\r\n");
      out.write("\t\t\t\tif(text == \"1\") {\r\n");
      out.write("\t\t\t\t\t//得到span元素\r\n");
      out.write("\t\t\t\t\tspan.innerHTML = \"用户名已被注册！\";\r\n");
      out.write("\t\t\t\t} else {\r\n");
      out.write("\t\t\t\t\tspan.innerHTML = \"OK\";\r\n");
      out.write("\t\t\t\t}\r\n");
      out.write("\t\t\t}\r\n");
      out.write("\t\t};\r\n");
      out.write("\t};\r\n");
      out.write("};\r\n");
      out.write("</script>\r\n");
      out.write("  </head>\r\n");
      out.write("  \r\n");
      out.write("  <body>\r\n");
      out.write("<h1>演示用户名是否被注册</h1>\r\n");
      out.write("<form action=\"\" method=\"post\">\r\n");
      out.write("用户名：<input type=\"text\" name=\"username\" id=\"usernameEle\"/><span id=\"errorSpan\"></span><br/>\r\n");
      out.write("密　码：<input type=\"password\" name=\"password\"/><br/>\r\n");
      out.write("<input type=\"submit\" value=\"注册\"/>\r\n");
      out.write("</form>\r\n");
      out.write("  </body>\r\n");
      out.write("</html>\r\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }

  private boolean _jspx_meth_c_005furl_005f0(javax.servlet.jsp.PageContext _jspx_page_context)
          throws java.lang.Throwable {
    javax.servlet.jsp.PageContext pageContext = _jspx_page_context;
    javax.servlet.jsp.JspWriter out = _jspx_page_context.getOut();
    //  c:url
    org.apache.taglibs.standard.tag.rt.core.UrlTag _jspx_th_c_005furl_005f0 = (org.apache.taglibs.standard.tag.rt.core.UrlTag) _005fjspx_005ftagPool_005fc_005furl_0026_005fvalue_005fnobody.get(org.apache.taglibs.standard.tag.rt.core.UrlTag.class);
    boolean _jspx_th_c_005furl_005f0_reused = false;
    try {
      _jspx_th_c_005furl_005f0.setPageContext(_jspx_page_context);
      _jspx_th_c_005furl_005f0.setParent(null);
      // /ajax3.jsp(46,24) name = value type = null reqTime = true required = false fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
      _jspx_th_c_005furl_005f0.setValue("/ValidateUsernameServlet");
      int _jspx_eval_c_005furl_005f0 = _jspx_th_c_005furl_005f0.doStartTag();
      if (_jspx_th_c_005furl_005f0.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE) {
        return true;
      }
      _005fjspx_005ftagPool_005fc_005furl_0026_005fvalue_005fnobody.reuse(_jspx_th_c_005furl_005f0);
      _jspx_th_c_005furl_005f0_reused = true;
    } finally {
      org.apache.jasper.runtime.JspRuntimeLibrary.releaseTag(_jspx_th_c_005furl_005f0, _jsp_getInstanceManager(), _jspx_th_c_005furl_005f0_reused);
    }
    return false;
  }
}
